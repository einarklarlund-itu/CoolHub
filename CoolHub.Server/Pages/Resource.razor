@page "/resource"

@namespace CoolHub

@using CoolHub.ViewModels
@using CoolHub.Models
@using System.ComponentModel

@inject ResourceViewModel ResourceViewModel
@implements IDisposable

@* Add the viewmodel as a cascading value, so that all the children of the 
ToDoPage component have a reference to the viewmodel*@

@* <CascadingValue Value=@ResourceViewModel Name="ResourceViewModel">
    <CommentListComponent />
</CascadingValue> *@

@if (resource == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@resource.Name</h1>

    <p>@resource.Description</p>

    @* <CascadingValue Value=@ResourceViewModel Name="ResourceViewModel">
        <CommentListComponent />
    </CascadingValue> *@
}

@code 
{
    
    private ResourceDetailsDTO resource;

    // update the entire view, the page and its components on PropertyChanged
    protected override async Task OnInitializedAsync()
    {
        ResourceViewModel.PropertyChanged += async (sender, e) => { 
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
        
        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ResourceViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }
}